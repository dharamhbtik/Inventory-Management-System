@page "/editproduct/{prdId:int}"
@attribute [Authorize]
@inject NavigationManager NavManager
@inject IViewProductByIdUseCase ViewProductUseCase
@inject IEditProductUseCase EditProductUseCase
<h3>Edit Product</h3>
<br/>
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <ProductInventoriesComponent 
        ProductInventories ="product.ProductInventories"
        OnInventorySelected="OnInventorySelected"></ProductInventoriesComponent>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    [Parameter]
    public int prdId { get; set; }
    private ProductInventoriesComponent ProductInventoriesComponent;
    private Product? product;

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductUseCase.ExecuteAsync(prdId);
    }
    private async void OnValidSubmit()
    {
        if (product != null)
        {
            //this.ProductInventoriesComponent.ProductInventories.ForEach(x =>
            //{
            //    x.ProductId = this.product.ProductId;
            //});
            await EditProductUseCase.ExecuteAsync(product);
            NavManager.NavigateTo("/products");
        }
    }
    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
}

